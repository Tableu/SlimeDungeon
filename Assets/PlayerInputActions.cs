//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""25852e67-541b-40be-ac18-849762007189"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""00b73396-db52-494a-aaba-bec86fc82ca5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""f3b1f8d7-663f-41a1-863a-b7d0f485f0d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26fafe59-7d04-41e2-b3e2-688f2b8b6e48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b6f9b1-e7a4-40fb-a2d6-d737770d9be5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fd0533c-c87a-4b44-89a6-434e3671ec8d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b127bde-39d4-4edd-8b0e-12b3a5210fad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c124efc0-a1c3-429f-8929-bd58204bb9e0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2802b4b6-d28d-454c-a4e3-674183c301df"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1fb56c41-7129-4718-8b66-948ee5f35898"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5fc9ba5-2730-4a56-8351-e0502071e251"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aa07001d-b877-4a8b-8a10-970bd07c0349"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""5e746e8f-7fd5-4af1-9446-61422db47d0d"",
            ""actions"": [
                {
                    ""name"": ""Pick Up"",
                    ""type"": ""Button"",
                    ""id"": ""454766d4-066d-4d95-a041-f13828a8f79e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchForms"",
                    ""type"": ""Value"",
                    ""id"": ""1b378a4c-613f-417f-9fc7-0ab326de32f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Basic Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3f10eca8-ad2a-4b16-85e5-cd44e4dba28a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Absorb"",
                    ""type"": ""Button"",
                    ""id"": ""afb8562f-903e-406f-88ab-410ee1028b97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5910b4f4-a47e-4ff5-a2ec-98b1edd9dad8"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""52f0de9a-9ba7-4af6-a7d4-a96991681fc1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchForms"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""74989b14-f043-420c-a3b3-3c4f0cbca633"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchForms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b3d31d8-50b5-46fd-a649-d701241385e1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchForms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""85029ef0-903b-41f6-95a4-ea3aac00ddda"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2f3f86-955c-4be9-a7e5-40f6cb15f5e6"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Absorb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spells"",
            ""id"": ""26de956c-6e01-4e42-bc91-a69c5ad2c2d7"",
            ""actions"": [
                {
                    ""name"": ""First"",
                    ""type"": ""Button"",
                    ""id"": ""5ca743cf-be27-4310-a182-f9bfb70d13d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Second"",
                    ""type"": ""Button"",
                    ""id"": ""d5d0cab1-e365-483d-9b3a-50769b5ab08f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Third"",
                    ""type"": ""Button"",
                    ""id"": ""1cb19c05-c58b-4026-8ddf-5fb48883b99f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c81b070-20e0-46f6-99be-07b48e3cdef5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""First"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d66189bf-316c-4dc3-8f6b-fb2a6b5419c9"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Second"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1289936-e4b5-4f67-9807-29eed580db7c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Third"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Direction = m_Movement.FindAction("Direction", throwIfNotFound: true);
        m_Movement_Pressed = m_Movement.FindAction("Pressed", throwIfNotFound: true);
        // Other
        m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
        m_Other_PickUp = m_Other.FindAction("Pick Up", throwIfNotFound: true);
        m_Other_SwitchForms = m_Other.FindAction("SwitchForms", throwIfNotFound: true);
        m_Other_BasicAttack = m_Other.FindAction("Basic Attack", throwIfNotFound: true);
        m_Other_Absorb = m_Other.FindAction("Absorb", throwIfNotFound: true);
        // Spells
        m_Spells = asset.FindActionMap("Spells", throwIfNotFound: true);
        m_Spells_First = m_Spells.FindAction("First", throwIfNotFound: true);
        m_Spells_Second = m_Spells.FindAction("Second", throwIfNotFound: true);
        m_Spells_Third = m_Spells.FindAction("Third", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Direction;
    private readonly InputAction m_Movement_Pressed;
    public struct MovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction => m_Wrapper.m_Movement_Direction;
        public InputAction @Pressed => m_Wrapper.m_Movement_Pressed;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Direction.started += instance.OnDirection;
            @Direction.performed += instance.OnDirection;
            @Direction.canceled += instance.OnDirection;
            @Pressed.started += instance.OnPressed;
            @Pressed.performed += instance.OnPressed;
            @Pressed.canceled += instance.OnPressed;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Direction.started -= instance.OnDirection;
            @Direction.performed -= instance.OnDirection;
            @Direction.canceled -= instance.OnDirection;
            @Pressed.started -= instance.OnPressed;
            @Pressed.performed -= instance.OnPressed;
            @Pressed.canceled -= instance.OnPressed;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Other
    private readonly InputActionMap m_Other;
    private List<IOtherActions> m_OtherActionsCallbackInterfaces = new List<IOtherActions>();
    private readonly InputAction m_Other_PickUp;
    private readonly InputAction m_Other_SwitchForms;
    private readonly InputAction m_Other_BasicAttack;
    private readonly InputAction m_Other_Absorb;
    public struct OtherActions
    {
        private @PlayerInputActions m_Wrapper;
        public OtherActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickUp => m_Wrapper.m_Other_PickUp;
        public InputAction @SwitchForms => m_Wrapper.m_Other_SwitchForms;
        public InputAction @BasicAttack => m_Wrapper.m_Other_BasicAttack;
        public InputAction @Absorb => m_Wrapper.m_Other_Absorb;
        public InputActionMap Get() { return m_Wrapper.m_Other; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
        public void AddCallbacks(IOtherActions instance)
        {
            if (instance == null || m_Wrapper.m_OtherActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OtherActionsCallbackInterfaces.Add(instance);
            @PickUp.started += instance.OnPickUp;
            @PickUp.performed += instance.OnPickUp;
            @PickUp.canceled += instance.OnPickUp;
            @SwitchForms.started += instance.OnSwitchForms;
            @SwitchForms.performed += instance.OnSwitchForms;
            @SwitchForms.canceled += instance.OnSwitchForms;
            @BasicAttack.started += instance.OnBasicAttack;
            @BasicAttack.performed += instance.OnBasicAttack;
            @BasicAttack.canceled += instance.OnBasicAttack;
            @Absorb.started += instance.OnAbsorb;
            @Absorb.performed += instance.OnAbsorb;
            @Absorb.canceled += instance.OnAbsorb;
        }

        private void UnregisterCallbacks(IOtherActions instance)
        {
            @PickUp.started -= instance.OnPickUp;
            @PickUp.performed -= instance.OnPickUp;
            @PickUp.canceled -= instance.OnPickUp;
            @SwitchForms.started -= instance.OnSwitchForms;
            @SwitchForms.performed -= instance.OnSwitchForms;
            @SwitchForms.canceled -= instance.OnSwitchForms;
            @BasicAttack.started -= instance.OnBasicAttack;
            @BasicAttack.performed -= instance.OnBasicAttack;
            @BasicAttack.canceled -= instance.OnBasicAttack;
            @Absorb.started -= instance.OnAbsorb;
            @Absorb.performed -= instance.OnAbsorb;
            @Absorb.canceled -= instance.OnAbsorb;
        }

        public void RemoveCallbacks(IOtherActions instance)
        {
            if (m_Wrapper.m_OtherActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOtherActions instance)
        {
            foreach (var item in m_Wrapper.m_OtherActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OtherActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OtherActions @Other => new OtherActions(this);

    // Spells
    private readonly InputActionMap m_Spells;
    private List<ISpellsActions> m_SpellsActionsCallbackInterfaces = new List<ISpellsActions>();
    private readonly InputAction m_Spells_First;
    private readonly InputAction m_Spells_Second;
    private readonly InputAction m_Spells_Third;
    public struct SpellsActions
    {
        private @PlayerInputActions m_Wrapper;
        public SpellsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @First => m_Wrapper.m_Spells_First;
        public InputAction @Second => m_Wrapper.m_Spells_Second;
        public InputAction @Third => m_Wrapper.m_Spells_Third;
        public InputActionMap Get() { return m_Wrapper.m_Spells; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpellsActions set) { return set.Get(); }
        public void AddCallbacks(ISpellsActions instance)
        {
            if (instance == null || m_Wrapper.m_SpellsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpellsActionsCallbackInterfaces.Add(instance);
            @First.started += instance.OnFirst;
            @First.performed += instance.OnFirst;
            @First.canceled += instance.OnFirst;
            @Second.started += instance.OnSecond;
            @Second.performed += instance.OnSecond;
            @Second.canceled += instance.OnSecond;
            @Third.started += instance.OnThird;
            @Third.performed += instance.OnThird;
            @Third.canceled += instance.OnThird;
        }

        private void UnregisterCallbacks(ISpellsActions instance)
        {
            @First.started -= instance.OnFirst;
            @First.performed -= instance.OnFirst;
            @First.canceled -= instance.OnFirst;
            @Second.started -= instance.OnSecond;
            @Second.performed -= instance.OnSecond;
            @Second.canceled -= instance.OnSecond;
            @Third.started -= instance.OnThird;
            @Third.performed -= instance.OnThird;
            @Third.canceled -= instance.OnThird;
        }

        public void RemoveCallbacks(ISpellsActions instance)
        {
            if (m_Wrapper.m_SpellsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpellsActions instance)
        {
            foreach (var item in m_Wrapper.m_SpellsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpellsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpellsActions @Spells => new SpellsActions(this);
    public interface IMovementActions
    {
        void OnDirection(InputAction.CallbackContext context);
        void OnPressed(InputAction.CallbackContext context);
    }
    public interface IOtherActions
    {
        void OnPickUp(InputAction.CallbackContext context);
        void OnSwitchForms(InputAction.CallbackContext context);
        void OnBasicAttack(InputAction.CallbackContext context);
        void OnAbsorb(InputAction.CallbackContext context);
    }
    public interface ISpellsActions
    {
        void OnFirst(InputAction.CallbackContext context);
        void OnSecond(InputAction.CallbackContext context);
        void OnThird(InputAction.CallbackContext context);
    }
}
